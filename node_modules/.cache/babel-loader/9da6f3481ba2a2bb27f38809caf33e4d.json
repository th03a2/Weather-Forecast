{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useRendererSelector = void 0;\n\nvar react_1 = require(\"react\");\n\nvar state_1 = require(\"../state\");\n/**\n * Custom Hook for loading the current document into context\n */\n\n\nexports.useRendererSelector = function () {\n  var _a = react_1.useContext(state_1.DocViewerContext).state,\n      currentDocument = _a.currentDocument,\n      pluginRenderers = _a.pluginRenderers;\n\n  var _b = react_1.useState(),\n      CurrentRenderer = _b[0],\n      setCurrentRenderer = _b[1];\n\n  react_1.useEffect(function () {\n    if (!currentDocument) return; // Do not advance if the document does not yet have a fileType\n    // This prevents prematurely showing 'no renderer' message\n\n    if (!currentDocument.fileType) {\n      setCurrentRenderer(undefined);\n      return;\n    }\n\n    var matchingRenderers = [];\n    pluginRenderers === null || pluginRenderers === void 0 ? void 0 : pluginRenderers.map(function (r) {\n      if (currentDocument.fileType === undefined) return;\n\n      if (r.fileTypes.indexOf(currentDocument.fileType) >= 0) {\n        matchingRenderers.push(r);\n      }\n    }); // Compute prefered Renderer based on weight\n\n    var SelectedRenderer = matchingRenderers.sort(function (a, b) {\n      return b.weight - a.weight;\n    })[0];\n\n    if (SelectedRenderer && SelectedRenderer !== undefined) {\n      setCurrentRenderer(function () {\n        return SelectedRenderer;\n      });\n    } else {\n      setCurrentRenderer(null);\n    }\n  }, [currentDocument]);\n  return {\n    CurrentRenderer: CurrentRenderer\n  };\n};","map":{"version":3,"sources":["C:/xampp/htdocs/mdbreact/node_modules/react-doc-viewer/build/utils/useRendererSelector.js"],"names":["Object","defineProperty","exports","value","useRendererSelector","react_1","require","state_1","_a","useContext","DocViewerContext","state","currentDocument","pluginRenderers","_b","useState","CurrentRenderer","setCurrentRenderer","useEffect","fileType","undefined","matchingRenderers","map","r","fileTypes","indexOf","push","SelectedRenderer","sort","a","b","weight"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8B,KAAK,CAAnC;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAArB;AACA;AACA;AACA;;;AACAJ,OAAO,CAACE,mBAAR,GAA8B,YAAY;AACtC,MAAII,EAAE,GAAGH,OAAO,CAACI,UAAR,CAAmBF,OAAO,CAACG,gBAA3B,EAA6CC,KAAtD;AAAA,MAA6DC,eAAe,GAAGJ,EAAE,CAACI,eAAlF;AAAA,MAAmGC,eAAe,GAAGL,EAAE,CAACK,eAAxH;;AACA,MAAIC,EAAE,GAAGT,OAAO,CAACU,QAAR,EAAT;AAAA,MAA6BC,eAAe,GAAGF,EAAE,CAAC,CAAD,CAAjD;AAAA,MAAsDG,kBAAkB,GAAGH,EAAE,CAAC,CAAD,CAA7E;;AACAT,EAAAA,OAAO,CAACa,SAAR,CAAkB,YAAY;AAC1B,QAAI,CAACN,eAAL,EACI,OAFsB,CAG1B;AACA;;AACA,QAAI,CAACA,eAAe,CAACO,QAArB,EAA+B;AAC3BF,MAAAA,kBAAkB,CAACG,SAAD,CAAlB;AACA;AACH;;AACD,QAAIC,iBAAiB,GAAG,EAAxB;AACAR,IAAAA,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,eAAe,CAACS,GAAhB,CAAoB,UAAUC,CAAV,EAAa;AAC/F,UAAIX,eAAe,CAACO,QAAhB,KAA6BC,SAAjC,EACI;;AACJ,UAAIG,CAAC,CAACC,SAAF,CAAYC,OAAZ,CAAoBb,eAAe,CAACO,QAApC,KAAiD,CAArD,EAAwD;AACpDE,QAAAA,iBAAiB,CAACK,IAAlB,CAAuBH,CAAvB;AACH;AACJ,KANiE,CAAlE,CAV0B,CAiB1B;;AACA,QAAII,gBAAgB,GAAGN,iBAAiB,CAACO,IAAlB,CAAuB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,aAAOA,CAAC,CAACC,MAAF,GAAWF,CAAC,CAACE,MAApB;AAA6B,KAAtE,EAAwE,CAAxE,CAAvB;;AACA,QAAIJ,gBAAgB,IAAIA,gBAAgB,KAAKP,SAA7C,EAAwD;AACpDH,MAAAA,kBAAkB,CAAC,YAAY;AAAE,eAAOU,gBAAP;AAA0B,OAAzC,CAAlB;AACH,KAFD,MAGK;AACDV,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;AACJ,GAzBD,EAyBG,CAACL,eAAD,CAzBH;AA0BA,SAAO;AAAEI,IAAAA,eAAe,EAAEA;AAAnB,GAAP;AACH,CA9BD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useRendererSelector = void 0;\nvar react_1 = require(\"react\");\nvar state_1 = require(\"../state\");\n/**\n * Custom Hook for loading the current document into context\n */\nexports.useRendererSelector = function () {\n    var _a = react_1.useContext(state_1.DocViewerContext).state, currentDocument = _a.currentDocument, pluginRenderers = _a.pluginRenderers;\n    var _b = react_1.useState(), CurrentRenderer = _b[0], setCurrentRenderer = _b[1];\n    react_1.useEffect(function () {\n        if (!currentDocument)\n            return;\n        // Do not advance if the document does not yet have a fileType\n        // This prevents prematurely showing 'no renderer' message\n        if (!currentDocument.fileType) {\n            setCurrentRenderer(undefined);\n            return;\n        }\n        var matchingRenderers = [];\n        pluginRenderers === null || pluginRenderers === void 0 ? void 0 : pluginRenderers.map(function (r) {\n            if (currentDocument.fileType === undefined)\n                return;\n            if (r.fileTypes.indexOf(currentDocument.fileType) >= 0) {\n                matchingRenderers.push(r);\n            }\n        });\n        // Compute prefered Renderer based on weight\n        var SelectedRenderer = matchingRenderers.sort(function (a, b) { return b.weight - a.weight; })[0];\n        if (SelectedRenderer && SelectedRenderer !== undefined) {\n            setCurrentRenderer(function () { return SelectedRenderer; });\n        }\n        else {\n            setCurrentRenderer(null);\n        }\n    }, [currentDocument]);\n    return { CurrentRenderer: CurrentRenderer };\n};\n"]},"metadata":{},"sourceType":"script"}